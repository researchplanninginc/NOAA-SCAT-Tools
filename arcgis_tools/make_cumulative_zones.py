# ---------------------------------------------------------------------------
# make_cumulative_zones.py
# Created on: Thu Oct 07 2010 10:56:23 AM
#   (generated by ArcGIS/ModelBuilder)
# Usage: make_cumulative_zones <All_Zones_DBF__From_ReportGen__> <OilZones_Current_Shapefile_> <Snapping_Report_Output_Folder> 
# ---------------------------------------------------------------------------

# Import system modules
import sys, string, os, datetime, arcpy
from arcpy import env

# Load required toolboxes...
#arcpy.AddToolbox("E:\RPI Projects\Kirby Spill\GIS_Data\Kirby SCAT.gdb\SCAT_Tools.tbx")

env.qualifiedFieldNames = False
arcpy.OverWriteOutput = 1

# Script arguments...
all_zones_shp = sys.argv[1]
table = sys.argv[2]
cumulative_out = sys.argv[3]
daily_out = sys.argv[4]
inputdate = sys.argv[5]

arcpy.AddMessage(str(inputdate))

if inputdate is None or inputdate == "" or inputdate =='#':
    now = datetime.datetime.now()
    outDateStr = now.strftime("%d%b%Y")
    qryDateStr = now.strftime("%Y-%m-%d")
    
else:
    datestring = inputdate
    dateformat = "%m/%d/%Y"
    new = datetime.datetime.strptime(str(datestring), dateformat)
    outDateStr = new.strftime("%d%b%Y")
    qryDateStr = new.strftime("%Y-%m-%d")

if all_zones_shp == '#':
    all_zones_shp = "D:\\Data\\NewSCAT101\\Zones\\OilZones_Current.shp" # provide a default value if unspecified

if cumulative_out == '#':
    cumulative_out = "D:\\Data\\NewSCAT101\\Zones\\Cumulative_Zones\\Cumulative_SCAT_" + outDateStr + ".shp" # provide a default value if unspecified

if daily_out == '#':
    daily_out = "D:\\Data\\NewSCAT101\\Zones\\DailyZones\\DailyZones_" + outDateStr + ".shp" # provide a default value if unspecified     

try:
    arcpy.AddMessage("Making Cumulative Zones..")
    # Make a layer from the feature class
    arcpy.MakeFeatureLayer_management(all_zones_shp,"cumulative_shape")
    arcpy.MakeTableView_management(table,"cumulative_table")

    # Process: Add Join...
    arcpy.AddJoin_management("cumulative_shape", "ZoneSurvID", "cumulative_table", "UniqueZnID")
    fieldlist = arcpy.ListFields("cumulative_shape")
    arcpy.AddMessage("   Joining...")
    
    # Process: Create Feature Class...
    arcpy.CopyFeatures_management("cumulative_shape", cumulative_out)

    # Process: Delete Field...
    arcpy.DeleteField_management(cumulative_out, ["ZoneLen","lat1","lon1","lat2","lon2","PARENT_ID","DateAdded","OID_","State","County","SegLength","IsMRSurv","IsMaxSurv","ZoneLat","ZoneLon","ZoneEndLat","ZoneEndLon","CleanConcn","ZoneLength","ZoneWidth","HtOnPlants","PctOverlap","ZoneCommnt","Debris","OiledDebri","TBCount","TBArea","TBAreaUnit","TBAvgSize","TBMaxSize","TBCount1","TBType1","TBCount2","TBType2","TBCount3","TBType3","Team1","Team2","Team3","Team4","Team5","Team6","Team7","Team8"])
    arcpy.AddMessage("   Dropping Fields..")

    arcpy.AddMessage("Making Daily Zones...")
    # Make a layer from the feature class
    selstr = "\"DateAdded\" = date '" + qryDateStr + "'" 
    arcpy.MakeFeatureLayer_management(all_zones_shp,"daily_shape", selstr)
    arcpy.MakeTableView_management(table,"daily_table")

    # Process: Add Join...
    arcpy.AddMessage("   Joining...")
    arcpy.AddJoin_management("daily_shape", "ZoneSurvID", "daily_table", "UniqueZnID", "KEEP_ALL")
    fieldlist = arcpy.ListFields("daily_shape")

    # Process: Create Feature Class...
    arcpy.CopyFeatures_management("daily_shape", daily_out)

    # Process: Delete Field...
    arcpy.AddMessage("   Dropping Fields...")
    arcpy.DeleteField_management(daily_out, ["MaxOil","no_intsct","lat1","lon1","lat2","lon2","PARENT_ID","DateAdded","OID_","UniqueZnID","Segment","State","County","OpDiv","SegName","SegLength","SurvDate_1","SStartTime","TeamNum","IsMRSurv","IsMaxSurv","ZoneName","ZoneLat","ZoneLon","ZoneEndLat","ZoneEndLon","TidalZone","IsPrimary","CleanConcn","ZoneLength","ZoneWidth","HtOnPlants","PctOverlap","ZoneCommnt","Debris","OiledDebri","SODistro","SOThicknes","OilingChar","TBCount","TBArea","TBAreaUnit","TBAvgSize","TBMaxSize","TBType","TBCount1","TBType1","TBCount2","TBType2","TBCount3","TBType3","Team1","Team2","Team3","Team4","Team5","Team6","Team7","Team8"])

    arcpy.AddMessage("   Adding Fields...")  
    arcpy.AddField_management(daily_out, "Div", "TEXT", 6)
    rows = arcpy.UpdateCursor(daily_out)
    row = rows.next()
    while row:
        div = row.getValue("SegNum")
        row.Div = div.split("-")[0]+"-"+div.split("-")[1]
        rows.updateRow(row)
        row = rows.next()
    del row
    del rows
      
except arcpy.ExecuteError:
    # Get the geoprocessing error messages
    msgs = arcpy.GetMessage(0)
    msgs += arcpy.GetMessages(2)

    # Return gp error messages for use with a script tool
    arcpy.AddError(msgs)

    # Print gp error messages for use in Python/PythonWin
    print msgs  
